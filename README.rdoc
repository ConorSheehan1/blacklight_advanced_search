This is an advanced search plugin for Blacklight ( http://www.projectblacklight.org ).  It is meant to be installed alongside the Blacklight plugin in your application's vendor/plugins directory.


== Pre-requisites:
* The Blacklight plugin ( http://github.com/projectblacklight/blacklight )
  * NOTE: post-2.5 is required for current version of Advanced Search plugin.
* RubyTree gem ( http://rubytree.rubyforge.org/ )

== Installation:
Clone the advanced search plugin from github into your application's vendor/plugins directory 
* cd into your application's vendor/plugins directory and run the following command:
 git clone http://github.com/projectblacklight/blacklight_advanced_search.git

You can later use standard git commands to update the plugin to a new version.   
 
OR

from your application's main directory, run:

 ./script/plugin install http://github.com/projectblacklight/blacklight_advanced_search.git
 

You can later use "./script/plugin update blacklight_advanced_search" to update to latest code.  
 
You may now want to install gem dependencies added by the gem, by running:

 sudo rake gems:install
 
You can also now optionally run the installer script to install some optional example configuration files. In many cases, no configuration is needed for advanced search plugin to work. 
* cd back to your application's root directory
 cd ../../
* And then run the the following command:
 rake rails:template LOCATION=vendor/plugins/blacklight_advanced_search/template.rb
 
== Accessing
 
 
The advanced search form will be available in your app at /advanced

  url_for(:controller => "advanced", :action => "index")
  
You can also send the advanced search form url parameters representing a search, to have the form add on additional 'advanced' criteria to the search.  For example:

  url_for( params.merge(:controller => "advanced", :action => "index")
  
If you do not have the default :controller/:action route enabled for your application, you may need to add a custom route to config/routes.rb.  For example:

    map.advanced 'advanced', :controller => 'advanced', :action => 'index'
  
By default there won't be any links in your application to the search form. If you've heavily customized your app, you can put them wherever you want as above. 

However, especially if your app isn't much customized, the optional installer can write a localized Blacklight search form into your application with a 'more options' link to advanced. You may need to adjust your styles to make room for the new link, depending on what you've done with your app. 
 

== Configuration:

If your application uses a single Solr qt request handler for all its search fields, then this plugin may work well with no configuration.  Nonetheless, configuration is available to change or improve behavior, or to use a separate Solr request handler for the advanced search plugin.

All plugin configuration mentioned below can be in any initializer in your app (any ruby file in config/initializers), although using the convention config/initializers/blacklight_advanced_search.rb may keep things clear. 

The optional installer script can install a sample blacklight_advanced_search.rb for you which demonstrates various options.

=== Search fields

Your main blacklight search fields are generally defined in config/blacklight_config.rb, under "config[:search_fields]" ( https://github.com/projectblacklight/blacklight/blob/master/config/initializers/blacklight_config.rb#L194 ). If there are particular search fields in your main blacklight config you want excluded from the advanced search form, you can set ":include_in_advanced_search => false"

All advanced search fields must share the same Solr request handler (":qt"). As such, search fields that use a custom ":qt" parameter may not be re-used by the advanced search plugin. However, you may use a separate Solr request handler than the Blacklight default. If you would like the advanced search to use a different Solr request handler than your app's default, set:
  BlacklightAdvancedSearch.config[:qt]
to the name of the Solr request handler. 

If you use a separate Solr request handler for advanced search, you must supply a completely separate list of search fields for the advanced search form. Each field is defined by a hash whose format is specified in Blacklight::SearchFields ( https://github.com/projectblacklight/blacklight/blob/master/lib/blacklight/search_fields.rb#L7 ). 

  BlacklightAdvancedSearch.config[:search_fields] = []
  BlacklightAdvancedSearch.config[:search_fields] << {
    :key => 'title',
    :solr_local_parameters => {
      :qf => "title_t subtitle_t addl_titles_t title_unstem_search^1000" # see ( http://wiki.apache.org/solr/DisMaxQParserPlugin#qf_.28Query_Fields.29 )
      :pf => "title_t subtitle_t addl_titles_t title_unstem_search^1000" # see ( http://wiki.apache.org/solr/DisMaxQParserPlugin#pf_.28Phrase_Fields.29 )
    }
  }

Additionally, to make your advanced search solr requests more concise, you are strongly encouraged to take advantage of the :local_solr_parameters option in your search field definition to use a solr parameter substitution with $variables. 

  BlacklightAdvancedSearch.config[:search_fields] << {
    :key => 'author'
    :solr_local_parameters => {
      :qf=>"$qf_author",
      :pf=>"$pf_author"
    }
  }

Within your solrconfig.xml you may then provide the appropriate custom configuration.

  <requestHandler name="advanced" class="solr.SearchHandler" >
    <lst name="defaults">
      <!-- ... -->
      <str name="qf_author">
        author_1xx_unstem_search^200
        author_7xx_unstem_search^50
        author_8xx_unstem_search^10
        author_1xx_search^20       vern_author_1xx_search^20
        author_7xx_search^5        vern_author_7xx_search^5
        author_8xx_search          vern_author_8xx_search
      </str>
      <str name="pf_author">
        author_1xx_unstem_search^5000
        author_7xx_unstem_search^3000
        author_1xx_search^500        vern_author_1xx_search^500
        author_7xx_search^300        vern_author_7xx_search^300
        author_8xx_unstem_search^250
        author_8xx_search^200        vern_author_8xx_search^200
      </str>
    </lst>
  </requestHandler>


=== Facets

By default, the advanced search form will show as limits whatever facets are configured as default in your Solr request handler.  To have the advanced search form request specific facets and/or specific facet parameters, you can set config[:form_solr_parameters]. 

  BlacklightAdvancedSearch.config[:form_solr_parameters] = {
    "facet.field" => ["format", "language_facet"],
    "facet.limit" => -1, # return all facet values
    "facet.sort" => "index" # sort by byte order of values
  }
 

=== All Config Options

[config[:solr_type]]
  "dismax" or "edismax". "dismax" is default. "edismax" may work with the edismax query parser, this function may be a work in progress?
[config[:qt]] 
   Solr request handler to use for any search that includes advanced search criteria. Defaults to what the application has set as Blacklight.config[:default_qt]
[config[:url_key]]
   Key to use in application URLs to indicate advanced search is included in a query, defaults to "advanced". URLs will have "&search_field=[url key]".
[config[:search_fields]]
  Array of search field definitions to be used for advanced search. Each element in the array is a hash of the form required by Blacklight::SearchFields. If left blank, the plugin will use definitions from your main app Blacklight.config[:search_fields] -- only those which have no :qt set, and do not have :include_in_advanced_search => false. 
[config[:form_solr_paramters]]
  A hash of solr parameters which will be included in Solr request sent before display of advanced search form. Can be used to set facet parameters for advanced search form display.  

== To Do

* Fix rspec tests (do not currently pass, have not been updated to new code)
* Fix to-dismax parser to not choke on quoted phrases in input. 
* Alphabetical sorting of facet values returned by solr in count order (perhaps with limit). 


